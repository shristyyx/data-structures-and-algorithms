// Kruskal's Algorithm

// Important concept used : Disjoint set 
// which has Ultimate Parent and Union by Rank

// Kruskal's Algorithm : used to solve MINMUM SPANNING TREE  --> 
// representing the graph as n nodes
// and n-1 edges such that from each node you can travel every other node
// with minimum total edge wieght

// STEPS: 
// sort all the edges according to wieght
// from all the sorted edges, 
// if the new edge and spanning tree don 't have
// same Ultimate parent, add this edge
// else pass



#include<bits/stdc++.h>
using namespace std;

// Snippet Code for a disjoint set unit
class DisjointSet {
    vector<int> rank, parent;
public:
    // Constructor which will resize the rank and parent vectors to number of nodes
    // set size for all = 0
    // set parents of each ode as node itself
    DisjointSet(int n) {
        rank.resize(n + 1, 0);
        parent.resize(n + 1);
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
        }
    }


    // function to find parent
    // if the node's parent is node itslef return node
    // else keep calling recursive function for parent of node
    int par(int node) {
        if (node == parent[node])
            return node;
        return parent[node] = par(parent[node]);
    }


    // Union function is used to unite two unconnected nodes
    // parent of both nodes were different earlier 
    // now since both get connected the parent will become same
    // parent of node whose rank is low will also change to parent of node who rank was high
    // add rank of smaller to rank of larger component
    void unionByRank(int u, int v) {
        int ulp_u = par(u);
        int ulp_v = par(v);
        if (ulp_u == ulp_v) return;
        if (rank[ulp_u] < rank[ulp_v]) {
            parent[ulp_u] = ulp_v;
        }
        else if (rank[ulp_v] < rank[ulp_u]) {
            parent[ulp_v] = ulp_u;
        }
        else {
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }
};


class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        // code here
        vector<pair<int, pair<int, int>>> edges;
        for(int i=0; i<V; i++){
            for(auto it: adj[i]){
            
            int node = i;
            int adjNode =it[0];
            int wt= it[1];
            
            edges.push_back({wt, {node, adjNode}});}  
        }
        
        sort(edges.begin(), edges.end());
        
        int mstWt=0;
        DisjointSet ds(V);
        
        for(auto it: edges){
            int wt = it.first;
            int u = it.second.first;
            int v = it.second.second;
            
            if(ds.par(u)!=ds.par(v)) {
                ds.unionByRank(u,v);
                mstWt+=wt;
            }
        }
        return mstWt;
    }
};


int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj[V];
        int i=0;
        while (i++<E) {
            int u, v, w;
            cin >> u >> v >> w;
            vector<int> t1,t2;
            t1.push_back(v);
            t1.push_back(w);
            adj[u].push_back(t1);
            t2.push_back(u);
            t2.push_back(w);
            adj[v].push_back(t2);
        }
        
        Solution obj;
    	cout << obj.spanningTree(V, adj) << "\n";
    }

    return 0;
}



/*
Sample Input : 
3 3
0 1 5
1 2 3
0 2 1


Solution :
4
as the second and third edges will be considered
*/ 

/*
Sample Input : 
2 1
0 1 5


Solution :
5
as only one edge is present and needs to be considered
*/ 
